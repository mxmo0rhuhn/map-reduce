# -----------------------------------------------------------------------------
# Einstellungen des Frameworks
# -----------------------------------------------------------------------------
# 10000L Milisekunden => 10 Sekunden
# Intervall in Millisekunden in dem Statistiken geladen werden
statisticsPrinterTimeout=10000

# Ein Master hat eine Liste an Tasks, die gerade ausgeführt werden. Mit diesem Parameter wird die Grösse dieser Liste beschränkt. Wenn
# diese Grösse erreicht worden ist, wartet der Master, bis einige Tasks beenedet wurden, bevor er neue erstellt. Wenn Tasks dieser
# Liste fehlschlagen, werden sie neu gestartet, bevor komplett neue Tasks erstellt werden.
MaxRunningTasks=10000

# Das Basisverzeichnis, mit dem die FilePersistence arbeitet. Muss beschreibbar sein!
filepersistence.directory=/tmp/filepers

# Durch Kommata getrennte Namen der Plugins, die durch den Loader geladen werden sollen. Moegliche Werte: Socket,Thread
#plugins=Thread
#plugins=Socket
plugins=Thread,Socket

# -----------------------------------------------------------------------------
# Thread Plugin

# Anzahl an Threads die als Worker zur VerfÃ¼gung gestellt werden wenn dieses Attribut nicht gesetzt ist, werden Kerne +1 verwendet
nThreadWorkers=100

# -----------------------------------------------------------------------------
# Socket Plugin

# 60'000 = 1 Min

# Wie lange der Resultat-Status von einem verfügbaren Resultat in der Liste vom SocketResultCollector gehalten werden soll. Dies passiert,
# wenn der Agent ein Resultat hat und den SocketWorker darüber informiert. Typischerweise müsste dies der SocketWorker sofort akzeptieren,
# wordurch der Eintrag aus der Liste gelöscht werden kann. (Der SocketWorker hat ja sonst nichts zu tun).
availableResultTimeToLive=10000

# Wie lange ein Eintrag von einem SocketWorker in der Liste der Resultat-Stati beim SocketResultCollector bleiben soll. Dieser Eintrag wird
# gemacht, sobald der SocketWorker einen Task dem Agent übergibt. Dann registriert er sich nämlich beim SocketResultCollector, dass er an diesem
# Resultat interessiert ist. Typischerweise existiert also ein solche Eintrag über die ganze Dauer, die ein Task auf dem Agent ist - also etwas
# länger als die Laufzeit eines Task.
requestedResultTimeToLive=600000

# Der ResultCleanerTask geht periodisch über die Liste der Result-State und prüft, ob es veraltete Einträge hat, für die entweder nie ein Resultat
# vom SocketAgent angekommen ist oder der SocketWorker ein angekommenes Resultat nie abgeholt hat.
socketResultCleanupSchedulingDelay=60000

# Die Map-,Reduce- und Combiner Instruction werden serialisiert als Byte-Code zum Agent geschickt. Auf dem Server wird ein Cache verwendet, dass
# die Serialisierung nicht für jeden Task erneut durchgeführt werden muss. Dies ist ein LRU Cache und dieser Parameter bestimmt die Anzahl
# Einträge im Cache, bevor der älteste gelöscht wird.
objectByteCacheSize=30

# Zeit, die gewartet wird, bevor der Task vom Agent als 'nicht-akzeptiert' klassifiziert wird. Dies könnte passieren, wenn der Agent nicht auf
# auf die Anfrage eines Task reagiert - ist aber sehr unwahrscheinlich, da die Verbindung SocketWorker-SocketAgent 1:1 ist. Wir brauchen das
# Timeout aber trotzdem, weil er sonst unter umständen ewig hangen könnte.
agentTaskTriggeringTimeout=2000

# Jeder Agent wird periodisch gepingt, um zu schauen, ob er noch existiert. Falls er nicht mehr existiert, wird er vom Pool genommen und müsste sich
# ggf. selbstständig neu anmelden. Dieser Parameter bestimmt die Zeitspanne in Millisekunden zwischen zwei Pings an den selben Agent.
agentPingerDelay=5000

# Auf diesem Port wird die Registry auf Server/Masterseite gestartet. Dies ist der Standard IANA Simon-Port.
simonport=4753
